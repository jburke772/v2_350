#####################################################################
# 	Macros
#####################################################################

[gcode_macro _KNOMI_STATUS]
variable_homing: False
variable_probing: False
variable_qgling: False
variable_heating_nozzle: False
variable_heating_bed: False
variable_print: False
variable_printed: False
gcode:

#####################################################################
# 	Stand-Alone Bed Mesh
#####################################################################

[gcode_macro BED_MESH]
gcode:
    status_homing
    G28
    status_leveling
    QUAD_GANTRY_LEVEL
    status_homing
    G28
    status_meshing
    BED_MESH_CALIBRATE METHOD=scan SCAN_MODE=rapid PROFILE=DYNAMIC
    BED_MESH_PROFILE LOAD=DYNAMIC

#####################################################################
# 	Purge into Bucket
#####################################################################

[gcode_macro PURGE_BUCKET]
gcode:
    SAVE_GCODE_STATE NAME=PURGE
    G90                    ; absolute
    G0 X75 Y354 Z2         ; go to purge bucket
    G1 X25 E10 F500        ; purge some filament into bucket
    G1 X75 E3 F500         ; purge some filament into bucket
    # G0 X120 Y355 F750      ; move across purge brush
    G1 E-2 F500            ; Retract a little
    G1 Z3                  ; Raise and return
    RESTORE_GCODE_STATE NAME=PURGE

#####################################################################
# 	Wipe Nozzle
#####################################################################

[gcode_macro NOZZLE_WIPE]
    variable_start_x: 90.0
    variable_start_y: 354
    variable_start_z: 1.0
    
    variable_wipe_dist: 35
    variable_wipe_qty: 10
    variable_wipe_spd: 20000
    variable_raise_distance: 10
    
    variable_wipe_nozzle_temp: 180
    
    gcode:
     SAVE_GCODE_STATE NAME=nozzle_wipe
     # Is there a way to get target temp in case if heating
     # is in progress?
     {% set ACTUAL_TEMP = printer.extruder.temperature %}
     {% set HEATED = False %}
     {% if "xyz" not in printer.toolhead.homed_axes %}
         G28
     {% endif %}
     {% if printer.extruder.temperature < wipe_nozzle_temp %}
         status_heating
         M109 S{wipe_nozzle_temp}
         {% set WAS_HEATING = True %}
     {% endif %}
     M117 Nozzle wiping...
     status_cleaning
     G90  ; absolute positioning
     ## Move nozzle to start position
     G1 X{start_x} Y{start_y} F6000
     G1 Z{start_z} F1500
     {% if WAS_HEATING == True %}
         # Start cooling it. Well, back to original temp
         M104 S{ACTUAL_TEMP}
     {% endif %}
     ## Wipe nozzle
     {% for wipes in range(1, (wipe_qty + 1)) %}
         G1 X{start_x + wipe_dist} F{wipe_spd}
         G1 X{start_x} F{wipe_spd}
     {% endfor %}
     ## Raise nozzle
     G1 Z{raise_distance}
     status_ready
     RESTORE_GCODE_STATE NAME=nozzle_wipe

#####################################################################
# 	Purge and Wipe after Filament Change
#####################################################################
[gcode_macro BIDET]
    variable_start_x: 90.0
    variable_start_y: 353.5
    variable_start_z: 1.0
    
    variable_wipe_dist: 35
    variable_wipe_qty: 15
    variable_wipe_spd: 20000
    variable_raise_distance: 10
    
    variable_wipe_nozzle_temp: 180
gcode:
    # PURGE_BUCKET
    # NOZZLE_WIPE
    # status_printing
    # SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=print VALUE=True
    SAVE_GCODE_STATE NAME=PURGE
    # PURGE FILAMENT
    G90                    ; absolute
    G0 X75 Y354 Z2         ; go to purge bucket
    G1 X25 E10 F500        ; purge some filament into bucket
    G1 X75 E3 F500         ; purge some filament into bucket
    # G0 X120 Y355 F750      ; move across purge brush
    G1 E-2 F500            ; Retract a little
    G1 Z3                  ; Raise and return

    # WIPE NOZZLE
    # Is there a way to get target temp in case if heating
    # is in progress?
    {% set ACTUAL_TEMP = printer.extruder.temperature %}
    {% set HEATED = False %}
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}
    {% if printer.extruder.temperature < wipe_nozzle_temp %}
        status_heating
        M109 S{wipe_nozzle_temp}
        {% set WAS_HEATING = True %}
    {% endif %}
    M117 Nozzle wiping...
    status_cleaning
    G90  ; absolute positioning
    ## Move nozzle to start position
    G1 X{start_x} Y{start_y} F6000
    G1 Z{start_z} F1500
    {% if WAS_HEATING == True %}
        # Start cooling it. Well, back to original temp
        M104 S{ACTUAL_TEMP}
    {% endif %}
    ## Wipe nozzle
    {% for wipes in range(1, (wipe_qty + 1)) %}
        G1 X{start_x + wipe_dist} F{wipe_spd}
        G1 X{start_x} F{wipe_spd}
    {% endfor %}
    ## Raise nozzle
    G1 Z{raise_distance}
    RESTORE_GCODE_STATE NAME=PURGE
    
#####################################################################
# 	Homing
#####################################################################
## NOW USES BEACON SETTINGS FOR SAFE HOMING
# [homing_override]
# axes: z
# set_position_z: 0
# gcode:
#     status_homing
#     G90
#     G0 Z5 F500
#     # G28 X0 Y0 needs to be homed individually with sensorless homing
#     # Set X feed rate to a low value
#     SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=homing VALUE=True
#     G28 X0
#     G28 Y0
#     G0 X177.5 Y197.5 F12000 # X177.5 Y197.5
#     G28 Z0 F1000
#     SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=homing VALUE=False
#     G0 Z10 F500
#    status_ready

#####################################################################
# 	Start - End - Pause - Resume - Cancel
#####################################################################

#####################################################################
# 	Print Start
#####################################################################
#   Use PRINT_START for the slicer starting script - please customize for your slicer of choice
[gcode_macro PRINT_START]
gcode:
    BED_MESH_CLEAR
    SET_GCODE_OFFSET Z=0

    M104 S0                             ; make sure nozzle is off for now
    status_homing
    SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=homing VALUE=True
    G28                                 ; home axes
    SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=homing VALUE=False
    G0 Z2                               ; position beacon at 2mm for heat soak

    status_heating
    M140 S{ params.BED }                ; start bed heater
    M190 S{ params.BED }                ; wait on bed temperature
    G4 P60000                           ; optional, let temps settle for 1 min

    status_heating
    M104 S180                           ; preheat nozzle to probing and wiping temp
    M109 S180                           ; wait for nozzle probing and wiping temp
    
    status_homing
    SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=homing VALUE=True
    G28 Z METHOD=CONTACT CALIBRATE=1    ; calibrate z offset and beacon model hot
    SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=homing VALUE=False
    status_leveling
    SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=qgling VALUE=True
    QUAD_GANTRY_LEVEL                   ; QGL to balance towers
    SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=qgling VALUE=False
    status_meshing
    SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=probing VALUE=True
    BED_MESH_CALIBRATE RUNS=2           ; bed mesh in scan mode
    SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=probing VALUE=False

    status_homing
    SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=homing VALUE=True
    G28 Z METHOD=CONTACT CALIBRATE=0    ; calibrate z offset only after tilt/mesh
    SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=homing VALUE=False

    status_heating
    M104 S{ params.EXTRUDER }           ; set extruder to print temp
    M109 S{ params.EXTRUDER }           ; wait for extruder temp

    # SET_GCODE_OFFSET Z=0.06             ; add a little offset for hotend thermal expansion
                                          ; needs fine tuning, long meltzones require more
    # SET_GCODE_OFFSET Z_ADJUST={params.OFFSET}  ; apply optional material squish via slicer
    G0 X89 Y353                           ; go to purge bucket Location for loading prep
    # status_printing
    SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=print VALUE=True
    # PURGE_BUCKET                         ; call another macro to purge into bucket if available
    # BLOBIFIER                         ; call another macro to purge and wipe nozzle if available
    NOZZLE_WIPE                         ; call another macro to wipe nozzle if available
    VORON_PURGE                         ; call another macro to purge or prime nozzle
    status_printing
    ; start printing

#####################################################################
# 	Print End
#####################################################################
[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customize for your slicer of choice
gcode:
    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=print VALUE=False
    SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=printed VALUE=True
    M400                           ; wait for buffer to clear
    M221 S100                      ; set flow/movement percentage to 100%
    G92 E0                         ; zero the extruder
    G1 E-10.0 F3600                ; retract filament
    G91                            ; relative positioning
    G0 Z5 F20000                   ; move nozzle to remove stringing
    # G1 Z2 F3000                    ; move nozzle up 2mm
    G90                            ; absolute positioning
    G0  X10 Y354 F3600             ; park nozzle at rear
    # AFC_PARK                       ; Park toolhead
    # BT_TOOL_UNLOAD                 ; Unload currently loaded BT lane
    # M104 S0                        ; turn off nozzle
    # M140 S0                        ; turn off heatbed
    # M141 S0                        ; turn off chamber heater
    TURN_OFF_HEATERS               ; turn off all heaters
    M107                           ; turn off fan
    BED_MESH_CLEAR                 ; clear dynamic bed mesh
    
    # The purpose of the SAVE_GCODE_STATE/RESTORE_GCODE_STATE
    # command pair is to restore the printer's coordinate system
    # and speed settings since the commands above change them.
    # However, to prevent any accidental, unintentional toolhead
    # moves when restoring the state, explicitly set MOVE=0.
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0
    M117 VS.027       ~voron~
    status_ready

#####################################################################
# 	Pause
#####################################################################
[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
    ##### set defaults #####
    {% set x = params.X|default(50) %}      #edit to your park position
    {% set y = params.Y|default(354) %}      #edit to your park position
    {% set z = params.Z|default(5)|float %} #edit to your park position
    {% set e = params.E|default(1) %}        #edit to your retract length
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    PAUSE_BASE
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E-{e} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}    
      G1 Z{z_safe}
      G90
      G1 X{x} Y{y} F6000
    {% else %}
      {action_respond_info("Printer not homed")}
    {% endif %}
    
######################################################################
# 	Resume
#####################################################################
[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    ##### set defaults #####
    {% set e = params.E|default(1) %} #edit to your retract length
    #### get VELOCITY parameter if specified ####
    {% if 'VELOCITY' in params|upper %}
      {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
      {% set get_params = "" %}
    {% endif %}
    ##### end of definitions #####
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E{e} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}  
    RESUME_BASE {get_params}

#####################################################################
# 	Cancel
#####################################################################
[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=print VALUE=False
    # SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=standby VALUE=True
    M221 S100                      ; set flow/movement percentage to 100%
    G92 E0                         ; zero the extruder
    G1 E-10.0 F3600                ; retract filament
    # Raise nozzle by 10mm
    G91
    G1 Z10 F8000
    G90
    # AFC_PARK                       ; Park toolhead
    # BT_TOOL_UNLOAD                 ; Unload currently loaded BT lane
    G0  X10 Y354 F3600             ; park nozzle at rear
    TURN_OFF_HEATERS               ; turn off all heaters
    M107                           ; turn off fan
    CANCEL_PRINT_BASE
    
#####################################################################
# 	Filament Load and Unload Macros
#####################################################################
[gcode_macro LOAD_FILAMENT]
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
    SAVE_GCODE_STATE NAME=load_state
    M300 # beep
    G91
    G92 E0
    G1 E350 F{max_velocity} # fast-load
    G1 E25 F{speed} # purge
    M300
    M300
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    M300 # beep
    G92 E0
    G1 E25 F{speed} # purge
    G1 E-420 F{max_velocity} # fast-unload
    M300
    M300
    RESTORE_GCODE_STATE NAME=unload_state

#####################################################################
# 	Filament Retract and Unretract Macros for MMU
#####################################################################
[gcode_macro _RETRACT]
description: Helper to retract filament in pause and cancel
gcode:
    {% set vars = printer['gcode_macro _MMU_CLIENT_VARS'] %}
    {% set length = params.LENGTH|default(vars.retract)|default(1.0)|float %}
    {% set speed = params.SPEED|default(vars.retract_speed)|default(20)|int %}

    _UNRETRACT LENGTH=-{length|abs} SPEED={speed}

[gcode_macro _UNRETRACT]
description: Helper to extruder filament in resume to undo retract
gcode:
    {% set vars = printer['gcode_macro _MMU_CLIENT_VARS'] %}
    {% set length = params.LENGTH|default(vars.retract)|default(1.0)|float %}
    {% set speed = params.SPEED|default(vars.unretract_speed)|default(20)|int %}

    # Only apply retraction if Happy Hare is not managing it
    {% if not printer.mmu.enabled or not printer.mmu.is_paused %}
        SAVE_GCODE_STATE NAME=MMU_RETRACT_state

        {% if printer.extruder.can_extrude %}
            M83 ; Extruder relative
            G1 E{length} F{speed|abs * 60}
        {% endif %}

        RESTORE_GCODE_STATE NAME=MMU_RETRACT_state
    {% endif %}

#####################################################################
# 	Chamber Heater Macros
#####################################################################
[gcode_macro CHAMBER_TEMP_WAIT]
gcode:
  {% if params.MIN_TEMPERATURE and params.MAX_TEMPERATURE and params.MIN_TEMPERATURE|float > params.MAX_TEMPERATURE|float %}
    {action_raise_error("Chamber Temp Wait: MIN_TEMPERATURE must be less than or equal to MAX_TEMPERATURE
                         Use: 
                         - CHAMBER_TEMP_WAIT MIN_TEMPERATURE=[0..80]
                         - CHAMBER_TEMP_WAIT MAX_TEMPERATURE=[0..80]
                         - CHAMBER_TEMP_WAIT MIN_TEMPERATURE=[0..80] MAX_TEMPERATURE=[0..80]")}
  {% elif params.MIN_TEMPERATURE and params.MIN_TEMPERATURE|float > -1 and params.MIN_TEMPERATURE|float < 81 %}
    {% if params.MAX_TEMPERATURE and params.MAX_TEMPERATURE|float > -1 and params.MAX_TEMPERATURE|float < 81 %}
      TEMPERATURE_WAIT SENSOR="temperature_sensor chamber_temp" MINIMUM={params.MIN_TEMPERATURE|float} MAXIMUM={params.MAX_TEMPERATURE|float}
    {% else %}
      TEMPERATURE_WAIT SENSOR="temperature_sensor chamber_temp" MINIMUM={params.MIN_TEMPERATURE|float}
    {% endif %}
  {% elif params.MAX_TEMPERATURE and params.MAX_TEMPERATURE|float > -1 and params.MAX_TEMPERATURE|float < 81 %}
      TEMPERATURE_WAIT SENSOR="temperature_sensor chamber_temp" MAXIMUM={params.MAX_TEMPERATURE|float}
  {% else %}
    {action_raise_error("Chamber Temp Wait: invalid usage
                         Use: 
                         - CHAMBER_TEMP_WAIT MIN_TEMPERATURE=[0..80]
                         - CHAMBER_TEMP_WAIT MAX_TEMPERATURE=[0..80]
                         - CHAMBER_TEMP_WAIT MIN_TEMPERATURE=[0..80] MAX_TEMPERATURE=[0..80]")}
  {% endif %}


#####################################################################
# 	Misc Numbered Macros
#####################################################################

#####################################################################
# 	Home and QGL
#####################################################################
[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    status_homing
    G28
    status_leveling
    SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=qgling VALUE=True
    QUAD_GANTRY_LEVEL
    SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=qgling VALUE=False
    G28
    G0 X175 Y175 Z30 F3600

#####################################################################
# 	601 Pause
#####################################################################
[gcode_macro m601]
description: Pauses the current print.
  Usage: M601
gcode:
  PAUSE

#####################################################################
# 	602 Resume
#####################################################################
[gcode_macro m602]
description: Resumes the currently paused print.
  Usage: M602
gcode:
  RESUME

[gcode_macro m24]
rename_existing: M24.6245197
gcode:
  {% if printer.pause_resume.is_paused %}
  RESUME
  {% else %}
  M24.6245197
  {% endif %}

[gcode_macro m25]
rename_existing: M25.6245197
gcode:
  PAUSE

[gcode_macro M900]
gcode:
    {% set K = params.K|default(0) %}
    SET_PRESSURE_ADVANCE ADVANCE={K}

[gcode_macro M109]
rename_existing: M109.1
gcode:
  SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=heating_nozzle VALUE=True
  M109.1 {rawparams}
  SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=heating_nozzle VALUE=False

[gcode_macro M190]
rename_existing: M190.1
gcode:
  SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=heating_bed VALUE=True
  M190.1 {rawparams}
  SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=heating_bed VALUE=False

[gcode_macro M141]
gcode:
    SET_HEATER_TEMPERATURE HEATER=chamber_heater TARGET={params.S|default(0)}

[gcode_macro M191]
gcode:
    {% set s = params.S|float %}
    {% if s == 0 %}
        # If target temperature is 0, do nothing
        M117 Chamber heating cancelled
    {% else %}
        SET_HEATER_TEMPERATURE HEATER=chamber_heater TARGET={s}
        # Orca: uncomment the following line if you want to use heat bed to assist chamber heating
        # M140 S100
        TEMPERATURE_WAIT SENSOR="heater_generic chamber_heater" MINIMUM={s-1} MAXIMUM={s+1}
        M117 Chamber at target temperature
    {% endif %}

#####################################################################
# 	Speed Test Macro
#####################################################################

[gcode_macro TEST_SPEED]
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

description: Test for max speed and acceleration parameters for the printer. Procedure: Home -> ReadPositionFromMCU -> MovesToolhead@Vel&Accel -> Home -> ReadPositionfromMCU

gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Minimum Cruise Ratio
    {% set min_cruise_ratio = params.MIN_CRUISE_RATIO|default(0)|float %} # Possible location in printer object stack: printer.configfile.settings.printer.minimum_cruise_ratio
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    # SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2} # DEPRECATED | Due to deprecation of accel_to_decel parameter in Klipper
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} MIN_CRUISE_RATIO={minCruiseRatio}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small patternbox
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    #SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} # DEPRECATED | Depercating of accel_to_decel param in klipper
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} MIN_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio} 

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED